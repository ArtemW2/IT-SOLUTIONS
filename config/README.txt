# Инструкция по запуску и тестированию приложения

## Шаги по запуску

1. **Установка зависимостей**:

pip install -r requirements.txt

2. **Создание и применение миграций**:

python manage.py makemigrations
python manage.py migrate

3. **Наполнение базы данных**:

python manage.py loaddata fixtures/data.json

4. **Запуск сервера**:

python manage.py runserver

## Варианты взаимодействия

### Традиционный Веб-Интерфейс

- Основан на шаблонах и обычных представлениях.
- Предоставляет таблицу записей на главной странице (`http://127.0.0.1:8000`).
- Возможности: удаление, редактирование, фильтрация по дате, категории и подкатегории.

### REST API

- Построен с помощью вьюсетов и сериализаторов.
- Активация: раскомментируйте строку `path('', include(router.urls))` в файле `urls.py`.

#### Примеры запросов

1. **GET-запрос для всех транзакций**:
- Адрес: `http://127.0.0.1:8000/transactions/`
- Ожидаемый результат: Список всех транзакций.

2. **GET-запрос для конкретной транзакции**:
- Адрес: `http://127.0.0.1:8000/transactions/1/`
- Ожидаемый результат: Данные по транзакции с ID 1.

3. **POST-запрос**:
- Адрес: `http://127.0.0.1:8000/transactions/`
- Тело успешного запроса:
  ```
  {
      "date": "2025-03-03",
      "status": "Бизнес",
      "type": "Списание",
      "category": "Маркетинг",
      "subcategory": "Avito",
      "amount": "11111.00",
      "text": ""
  }

  ```
- Ожидаемый результат: Создание новой записи или ошибка при несоответствии категории и подкатегории, отсутствии обязательных полей(status, type, category, subcategory, amount)

4. **PUT и PATCH-запросы**:
- Адрес: `http://127.0.0.1:8000/transactions/1/`
- Тело запроса: Данные для обновления записи.
- Ошибки: Несоответствие категории и подкатегории, пустые обязательные поля.
